#include<iostream>
using namespace std;
//看文档中的图片即可
//继承的语法：class 子类 ：继承方式 父类
/*
继承方式一共有三种：
・公共继承
・保护继承
・私有继承
*/
/*
・公有继承
父类中私有权限（private）的成员，子类无法继承无法访问
在父类中公共权限，继承到子类依旧是公共权限。
在父类中保护权限，继承到子类依旧是保护权限。
父类中私有成员无法访问，其余两类成员依旧按照父类中的权限继承。
・保护继承
父类中私有权限（private）的成员，子类无法继承无法访问
在父类中公共权限，继承到子类变为是保护权限。
在父类中保护权限，继承到子类依旧是保护权限。
父类中私有成员访问不到，其余两类成员均变为保护权限。
・私有继承
父类中私有权限（private）的成员，子类无法继承无法访问
在父类中公共权限，继承到子类变为是私有权限。
在父类中保护权限，继承到子类变为是私有权限。
父类中私有成员访问不到，其余两类成员均变为私有权限。
*/
//公共继承
class Base13621//父类
{
public:
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};
class son13621 :public Base13621
{
public:
	void func()
	{
		m_A = 10;//父类中的公共权限成员公共继承到子类中依旧是公共权限
		m_B = 10;//父类中的保护权限成员公共继承到子类中依旧是保护权限
		//m_C = 10;//父类中的私有权限成员到子类访问不到
}
};
void test136201()
{
	son13621 s1;
	s1.m_A = 100;//子类继承的公共权限，类内可以访问，类外也可以访问
	//s1.m_B = 100;//子类继承的保护权限，类内可以访问，类外不可以访问
	//s1.m_C = 100;//子类不可以访问父类的私有权限
}
//保护继承
class Base13622
{
public:
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};
class Son13622 :protected Base13621
{
public:
	void fuc()
	{
		m_A = 100;//父类中公共成员，到子类变为保护权限
		m_B = 100;//父类中保护成员，到子类也是保护成员
		//m_C = 100;//子类访问不到父类中的私有成员
	}
};
void test136202()
{
	Son13622 s2;
	//s2.m_A = 100;//在Son13622中 m_A保护继承 在类外访问不到
	//s2.m_B = 100;//在Son13622中 m_B保护成员 在类外访问不到
}
//私有继承
class Base13623
{
public:
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};
class Son13623 :private Base13623
{
public:
	void func()
	{
		m_A = 100;//父类中的公共成员，继承到子类变为子类的私有成员
		m_B = 100;//父类中的保护成员，继承到子类变为子类的私有成员
		//m_C = 100;//父类中私有的成员，子类访问不到
	}
};
void test13623()
{
	Son13623 s3;
	//s3.m_A = 1000;//到Son3中 变为私有成员 类外访问不到
	//s3.m_B = 1000;//到Son3中 变为私有成员 类外访问不到
	//s3.m_C = 1000;//子类无法继承访问父类中的私有成员
}
class GrandSon13623 :public Son13623//再继承
{
public:
	void func()
	{
		/*
		m_A = 1000;
		m_B = 1000;
		m_C = 1000;
		*/
		//全部无法访问，因为son3通过私有继承后，全部变成了Son3的私有成员GrandSon3是无法访问到的
	}
};
int main()
{

	system("pause");
	return 0;
}